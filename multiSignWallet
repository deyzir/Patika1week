// SPDX-License-Identifier: GPL-3.0

pragma solidity >=0.7.0 <0.9.0;

contract multisign{
    // aplication ,revoke, submit,approve,executed


    event Deposit( address indexed _sender,uint amount);
    event Submit(uint indexed txtId);
    event Approve(address indexed owner,uint indexed txtId);
    event Revoke(address indexed ower,uint indexed txtId);
    event Executed(uint indexed txtId);
    


    struct Transaction{
        // to ,value,data,executed
        address to;
        uint value;
        bytes data;
        bool executed;
        
    }

address[] public owners;
mapping(address => bool) public isOwner;
uint public required;
Transaction[] public transactions;
mapping(uint => mapping(address => bool)) public approved;

modifier onlyOwner(){
    require(isOwner[msg.sender],"not owner");
    _;

}

// bir modifier ile txtId varmı kontrolu ediliceek 

modifier txtExists(uint _txtId){
    require (_txtId < transactions.length,"already exists");
    _;
}


// nir modifier ile izin verilmişmi verilmemiş mi kontrol edilicek msgsender i eklemeyi de unutma :)
modifier notApproved(uint _txtId  ) {
    require (!approved[_txtId] [msg.sender],"elready approved ");
    _;
} 


// not executed ile txt transaction edilmişmmi  executed i tanımla :)

modifier notExecuted(uint _txtId){
    require(!transactions[_txtId].executed , "already executed ");
    _;

}




// create a constructor and it have a string memory _owners uint _required 
// require 

constructor(address[] memory _owners, uint _required){
    require(_owners.length > 0 ,"owners required");
    require(_required >0 && _required <=_owners.length,"invalid required number of owners");
    // bir dongü oluşturucaz değer atadığımız i yi _owners.length den kuçukse  i++ artırıcaz
    // burda  owner adında  yeni bir address oluşturup bunu. da _owners[i] ataman lazım
    // burda require ile owner != address(0),"invalid"
    // burda ise require(!isOwner[owner],"değil");

    for(uint i; i< _owners.length;++i){

    
    address owner = _owners[i];// neden owner olarak bir address tanımladık sebebi  _owner içerisindekı i ye ulaşabilmek için 

    require(owner != address(0),"invalid owner");
    require( !isOwner[owner] , "owner is not uniqe ");
    isOwner[owner] = true;
    owners.push(owner);



    }
    required = _required;

    }

    receive() external payable{
        emit Deposit(msg.sender, msg.value);

    }
    function submit(address _to, uint _value,bytes calldata _data)
    external onlyOwner{
        transactions.push(Transaction({
            to: _to,
            value: _value,
            data: _data,

            executed:false
        }));
        emit Submit(transactions.length -1);


    }
    function approve(uint _txtId) external onlyOwner notExecuted(_txtId) notExecuted(_txtId) txtExists(_txtId){
        approved[_txtId][msg.sender] = true;

        emit Approve(msg.sender ,_txtId);


    } 

    // ### kodu yazmadan önce yurumluyorum ###
// get approved isminde bir private fonksiyon oluştur sonrasında uint bir değer donecek olan count u tanımla sonrasında for ile bir döngü yaz ve her bir i nin 
// küçük olması durumunda owners in uzunluğu kadar i artır ve bir şart koy eğer approvad dan _txt ve owners i sinden ise countu bir artır
    function _getApprovelCount(uint _txtId) private view returns(uint count){
        for(uint i; i<owners.length; i++){
            if(approved[_txtId] [owners[i]]){
                count +=1;
            }
        }
    }
// burda yeni bir fonksiyoon uluşturucanksın ismi execute txtId alıcak external olup notapproved ile excetured txtıd si alıcak 
//require ile getapprovecount u alıp buyuk eşit olması required ile eşle aprovals < required 
// stateddekı Transaction alıp alırken storge yazmayı unutma eşitle transactions[-txtıd]
// (bool success,) =  transaction to call{value : transaction.value ](transaction data )  
// transaction.executed true
//  require(success , "trnsctn failed")
// emit exectured(_txtıd)
function execute(uint _txtId) external  txtExists(_txtId) notExecuted(_txtId){
    require(_getApprovelCount(_txtId) >= required ,"_getApprovelCount <required");
    Transaction storage transaction = transactions[_txtId];
    (bool success, ) =  transaction.to.call{value: transaction.value} (transaction.data);
    require( success , "txt failed");

    transaction.executed = true;
    emit Executed( _txtId);


} 
// son fonksiyonumuz revoke isminde execute ile  aynı parametreleri alır. 
//require ile approved edilmişmi sorgula
// approved i false yap çünkü fonksiyon revoke :)
//emit Revoke () 
function revoke(uint _txtId ) external onlyOwner notExecuted(_txtId) txtExists(_txtId){
    require(approved[_txtId] [msg.sender] ,"doesnt approved");
    approved[_txtId] [msg.sender] = false;
    emit Revoke(msg.sender,_txtId);
}

}
